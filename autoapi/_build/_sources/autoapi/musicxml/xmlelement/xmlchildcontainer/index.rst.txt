:py:mod:`musicxml.xmlelement.xmlchildcontainer`
===============================================

.. py:module:: musicxml.xmlelement.xmlchildcontainer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   musicxml.xmlelement.xmlchildcontainer.DuplicationXSDSequence
   musicxml.xmlelement.xmlchildcontainer.XMLChildContainer
   musicxml.xmlelement.xmlchildcontainer.XMLChildContainerFactory



Functions
~~~~~~~~~

.. autoapisummary::

   musicxml.xmlelement.xmlchildcontainer._convert_xsd_child_to_xsd_container
   musicxml.xmlelement.xmlchildcontainer._check_if_container_requires_elements
   musicxml.xmlelement.xmlchildcontainer._check_if_choice_requires_elements
   musicxml.xmlelement.xmlchildcontainer._check_if_group_requires_elements
   musicxml.xmlelement.xmlchildcontainer._check_if_sequence_requires_elements



.. py:function:: _convert_xsd_child_to_xsd_container(xsd_child)


.. py:function:: _check_if_container_requires_elements(xsd_container)


.. py:function:: _check_if_choice_requires_elements(xsd_container_choice)


.. py:function:: _check_if_group_requires_elements(xsd_group_container)


.. py:function:: _check_if_sequence_requires_elements(xsd_sequence_container)


.. py:class:: DuplicationXSDSequence

   Bases: :py:obj:`musicxml.xsd.xsdindicator.XSDSequence`

   .. py:attribute:: sequence_xsd
      :annotation: = Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: text
           :linenos:

           
                       <xs:sequence xmlns:xs="http://www.w3.org/2001/XMLSchema">
                       </xs:sequence>
               

       .. raw:: html

           </details>

      


.. py:class:: XMLChildContainer(content, min_occurrences=None, max_occurrences=None, populate_children=True, *args, **kwargs)

   Bases: :py:obj:`tree.tree.Tree`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: check_requirements
      

      

   .. py:method:: _add_duplication_parent(self)


   .. py:method:: _check_content_type(val)
      :staticmethod:


   .. py:method:: _check_child_to_be_added(self, child)

              


   .. py:method:: _check_choices_intelligently(self, xml_element=None)


   .. py:method:: _create_empty_copy(self)

      Creates a copy without attached elements or duplicated nodes
      :return: XMLChildContainer


   .. py:method:: _duplicate_parent_in_path(self)


   .. py:method:: _update_requirements_in_path(self)


   .. py:method:: _populate_children(self)


   .. py:method:: _set_requirement_not_fulfilled(self)


   .. py:method:: compact_repr(self)
      :property:

      :return: A compact representation of ChildContainerTree.content.


   .. py:method:: content(self)
      :property:

      :return: Content of a ChildContainerTree is its core property. It can be of types: XSDSequence, XSDChoice, XSDGroup or XSDElement
      which are used to translate the behaviour of the according a xsd tags: sequence, choice, group and element.


   .. py:method:: choices_in_reversed_path(self)
      :property:


   .. py:method:: chosen_child(self)
      :property:


   .. py:method:: force_validate(self)
      :property:


   .. py:method:: max_is_reached(self)
      :property:


   .. py:method:: requirements_not_fulfilled(self)
      :property:


   .. py:method:: add_element(self, xml_element, forward=None, intelligent_choice=True)


   .. py:method:: check_required_elements(self, intelligent_choice=False)


   .. py:method:: duplicate(self)


   .. py:method:: get_attached_elements(self)


   .. py:method:: get_leaves(self, function=None)


   .. py:method:: get_parent_xml_element(self)

      :return: XMLElement which child container is attached to.


   .. py:method:: get_required_element_names(self, intelligent_choice=False)


   .. py:method:: set_force_validate(self, node, val)


   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: __copy__(self)



.. py:class:: XMLChildContainerFactory(complex_type)

   .. py:method:: _create_child_container(self, complex_type)


   .. py:method:: get_child_container(self)




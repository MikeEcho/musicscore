:py:mod:`musicxml.xsd.xsdindicator`
===================================

.. py:module:: musicxml.xsd.xsdindicator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   musicxml.xsd.xsdindicator.XSDSequence
   musicxml.xsd.xsdindicator.XSDChoice
   musicxml.xsd.xsdindicator.XSDGroup
   musicxml.xsd.xsdindicator.XSDGroupEditorial
   musicxml.xsd.xsdindicator.XSDGroupEditorialVoice
   musicxml.xsd.xsdindicator.XSDGroupEditorialVoiceDirection
   musicxml.xsd.xsdindicator.XSDGroupFootnote
   musicxml.xsd.xsdindicator.XSDGroupLevel
   musicxml.xsd.xsdindicator.XSDGroupStaff
   musicxml.xsd.xsdindicator.XSDGroupTuning
   musicxml.xsd.xsdindicator.XSDGroupVirtualInstrumentData
   musicxml.xsd.xsdindicator.XSDGroupVoice
   musicxml.xsd.xsdindicator.XSDGroupClef
   musicxml.xsd.xsdindicator.XSDGroupNonTraditionalKey
   musicxml.xsd.xsdindicator.XSDGroupSlash
   musicxml.xsd.xsdindicator.XSDGroupTimeSignature
   musicxml.xsd.xsdindicator.XSDGroupTraditionalKey
   musicxml.xsd.xsdindicator.XSDGroupTranspose
   musicxml.xsd.xsdindicator.XSDGroupBeatUnit
   musicxml.xsd.xsdindicator.XSDGroupHarmonyChord
   musicxml.xsd.xsdindicator.XSDGroupAllMargins
   musicxml.xsd.xsdindicator.XSDGroupLayout
   musicxml.xsd.xsdindicator.XSDGroupLeftRightMargins
   musicxml.xsd.xsdindicator.XSDGroupDuration
   musicxml.xsd.xsdindicator.XSDGroupDisplayStepOctave
   musicxml.xsd.xsdindicator.XSDGroupFullNote
   musicxml.xsd.xsdindicator.XSDGroupMusicData
   musicxml.xsd.xsdindicator.XSDGroupPartGroup
   musicxml.xsd.xsdindicator.XSDGroupScoreHeader
   musicxml.xsd.xsdindicator.XSDGroupScorePart




.. py:class:: XSDSequence(xsd_tree)

   .. py:method:: elements(self)
      :property:


   .. py:method:: xsd_tree(self)
      :property:



.. py:class:: XSDChoice(xsd_tree)

   .. py:method:: xsd_tree(self)
      :property:



.. py:class:: XSDGroup

   Bases: :py:obj:`musicxml.xsd.xsdtree.XSDTreeElement`

   Abstract class of all generated XSD Classes

   .. py:method:: name(self)
      :property:


   .. py:method:: sequence(self)
      :property:



.. py:class:: XSDGroupEditorial

   Bases: :py:obj:`XSDGroup`

   The editorial group specifies editorial information for a musical element.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupEditorialVoice

   Bases: :py:obj:`XSDGroup`

   The editorial-voice group supports the common combination of editorial and voice information for a musical element.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupEditorialVoiceDirection

   Bases: :py:obj:`XSDGroup`

   The editorial-voice-direction group supports the common combination of editorial and voice information for a direction element. It is separate from the editorial-voice element because extensions and restrictions might be different for directions than for the note and forward elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupFootnote

   Bases: :py:obj:`XSDGroup`

   The footnote element specifies editorial information that appears in footnotes in the printed score. It is defined within a group due to its multiple uses within the MusicXML schema.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupLevel

   Bases: :py:obj:`XSDGroup`

   The level element specifies editorial information for different MusicXML elements. It is defined within a group due to its multiple uses within the MusicXML schema.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupStaff

   Bases: :py:obj:`XSDGroup`

   The staff element is defined within a group due to its use by both notes and direction elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupTuning

   Bases: :py:obj:`XSDGroup`

   The tuning group contains the sequence of elements common to the staff-tuning and accord elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupVirtualInstrumentData

   Bases: :py:obj:`XSDGroup`

   Virtual instrument data can be part of either the score-instrument element at the start of a part, or an instrument-change element within a part.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupVoice

   Bases: :py:obj:`XSDGroup`

   A voice is a sequence of musical events (e.g. notes, chords, rests) that proceeds linearly in time. The voice element is used to distinguish between multiple voices in individual parts. It is defined within a group due to its multiple uses within the MusicXML schema.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupClef

   Bases: :py:obj:`XSDGroup`

   Clefs are represented by a combination of sign, line, and clef-octave-change elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupNonTraditionalKey

   Bases: :py:obj:`XSDGroup`

   The non-traditional-key group represents a single alteration within a non-traditional key signature. A sequence of these groups makes up a non-traditional key signature

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupSlash

   Bases: :py:obj:`XSDGroup`

   The slash group combines elements used for more complete specification of the slash and beat-repeat measure-style elements. They have the same values as the type and dot elements, and define what the beat is for the display of repetition marks. If not present, the beat is based on the current time signature.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupTimeSignature

   Bases: :py:obj:`XSDGroup`

   Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupTraditionalKey

   Bases: :py:obj:`XSDGroup`

   The traditional-key group represents a traditional key signature using the cycle of fifths.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupTranspose

   Bases: :py:obj:`XSDGroup`

   The transpose group represents what must be added to a written pitch to get a correct sounding pitch.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupBeatUnit

   Bases: :py:obj:`XSDGroup`

   The beat-unit group combines elements used repeatedly in the metronome element to specify a note within a metronome mark.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupHarmonyChord

   Bases: :py:obj:`XSDGroup`

   A harmony element can contain many stacked chords (e.g. V of II). A sequence of harmony-chord groups is used for this type of secondary function, where V of II would be represented by a harmony-chord with a 5 numeral followed by a harmony-chord with a 2 numeral.

   A root is a pitch name like C, D, E, while a numeral is a scale degree like 1, 2, 3. The root element is generally used with pop chord symbols, while the numeral element is generally used with classical functional harmony and Nashville numbers. It is an either/or choice to avoid data inconsistency. The function element, which represents Roman numerals with roman numeral text, has been deprecated as of MusicXML 4.0.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupAllMargins

   Bases: :py:obj:`XSDGroup`

   The all-margins group specifies both horizontal and vertical margins in tenths.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupLayout

   Bases: :py:obj:`XSDGroup`

   The layout group specifies the sequence of page, system, and staff layout elements that is common to both the defaults and print elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupLeftRightMargins

   Bases: :py:obj:`XSDGroup`

   The left-right-margins group specifies horizontal margins in tenths.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupDuration

   Bases: :py:obj:`XSDGroup`

   The duration element is defined within a group due to its uses within the note, figured-bass, backup, and forward elements.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupDisplayStepOctave

   Bases: :py:obj:`XSDGroup`

   The display-step-octave group contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupFullNote

   Bases: :py:obj:`XSDGroup`

   The full-note group is a sequence of the common note elements between cue/grace notes and regular (full) notes: pitch, chord, and rest information, but not duration (cue and grace notes do not have duration encoded). Unpitched elements are used for unpitched percussion, speaking voice, and other musical elements lacking determinate pitch.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupMusicData

   Bases: :py:obj:`XSDGroup`

   The music-data group contains the basic musical data that is either associated with a part or a measure, depending on whether the partwise or timewise hierarchy is used.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupPartGroup

   Bases: :py:obj:`XSDGroup`

   The part-group element is defined within a group due to its multiple uses within the part-list element.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupScoreHeader

   Bases: :py:obj:`XSDGroup`

   The score-header group contains basic score metadata about the work and movement, score-wide defaults for layout and fonts, credits that appear on the first or following pages, and the part list.

   .. py:attribute:: XSD_TREE
      

      


.. py:class:: XSDGroupScorePart

   Bases: :py:obj:`XSDGroup`

   The score-part element is defined within a group due to its multiple uses within the part-list element.

   .. py:attribute:: XSD_TREE
      

      


